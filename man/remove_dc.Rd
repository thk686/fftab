% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/frequency.R
\name{remove_dc}
\alias{remove_dc}
\alias{remove_symmetric}
\title{Remove DC Component and Symmetric Frequencies}
\usage{
remove_dc(x)

remove_symmetric(x)
}
\arguments{
\item{x}{A \code{tidy_fft} object containing Fourier coefficients and associated metadata.}
}
\value{
A \code{tidy_fft} object with filtered coefficients.
}
\description{
These functions operate on \code{tidy_fft} objects to manipulate and filter Fourier coefficients.
}
\details{
\itemize{
\item \code{remove_dc()}: Removes the DC (zero-frequency) component.
\item \code{remove_symmetric()}: Removes symmetric (negative frequency) components, retaining only non-negative frequencies.
\item \strong{\code{remove_dc()}}: Filters out rows where any \verb{.dim_*} column has a value of \code{0}. This effectively removes the DC component, which represents the mean value of the original signal.
\item \strong{\code{remove_symmetric()}}:
\itemize{
\item For real-valued signals, it filters out negative frequencies, retaining only non-negative ones (\code{.dim_1 >= 0}).
\item For complex-valued signals, no filtering is applied as symmetry isn't relevant.
\item For arrays, this function is not yet implemented and will raise an error if called.
}
}
}
\examples{
fft_x <- tidy_fft(sin(seq(0, 2 * pi, length.out = 128)))
fft_no_dc <- remove_dc(fft_x)
fft_no_sym <- remove_symmetric(fft_x)

}
\seealso{
\itemize{
\item \code{\link[dplyr:filter]{dplyr::filter()}}
\item \code{\link[=tidy_fft]{tidy_fft()}}
}
}
