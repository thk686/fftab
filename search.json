[{"path":"https://thk686.github.io/tidyfft/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 tidyfft authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://thk686.github.io/tidyfft/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Keitt. Author, maintainer.","code":""},{"path":"https://thk686.github.io/tidyfft/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keitt T (2024). tidyfft: Tidy manipulation fourier transformed data. R package version 0.0.0.9000, https://thk686.github.io/tidyfft/, https://github.com/thk686/tidyfft.","code":"@Manual{,   title = {tidyfft: Tidy manipulation of fourier transformed data},   author = {Timothy Keitt},   year = {2024},   note = {R package version 0.0.0.9000, https://thk686.github.io/tidyfft/},   url = {https://github.com/thk686/tidyfft}, }"},{"path":"https://thk686.github.io/tidyfft/index.html","id":"tidyfft","dir":"","previous_headings":"","what":"Tidy manipulation of fourier transformed data","title":"Tidy manipulation of fourier transformed data","text":"goal tidyfft make working fft’s R easier consistent. follows tidy philosophy storing output tibble.","code":""},{"path":"https://thk686.github.io/tidyfft/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tidy manipulation of fourier transformed data","text":"can install development version tidyfft GitHub :","code":"# install.packages(\"pak\") pak::pak(\"thk686/tidyfft\")"},{"path":"https://thk686.github.io/tidyfft/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tidy manipulation of fourier transformed data","text":"Using tidy_fft ggplot.","code":"library(tidyfft) (     tidy_fft(sunspot.month) |>     to_rect(.keep = \"all\") |>     to_polr(.keep = \"all\") -> sunspot.month.fft ) #> # A tibble: 3,177 × 6 #>      dim_1 fx                          re      im     mod    arg #>      <dbl> <cpl>                    <dbl>   <dbl>   <dbl>  <dbl> #>  1 0       165092.2000+    0.000i 165092.      0  165092.  0     #>  2 0.00378  13876.3375+15850.464i  13876.  15850.  21066.  0.852 #>  3 0.00755  -2733.7209+16131.802i  -2734.  16132.  16362.  1.74  #>  4 0.0113   -8428.2640-18110.753i  -8428. -18111.  19976. -2.01  #>  5 0.0151  -14755.1410- 1860.878i -14755.  -1861.  14872. -3.02  #>  6 0.0189   -7986.8153+12940.843i  -7987.  12941.  15207.  2.12  #>  7 0.0227   -2173.4245+ 7168.128i  -2173.   7168.   7490.  1.87  #>  8 0.0264   -3395.5271- 7055.326i  -3396.  -7055.   7830. -2.02  #>  9 0.0302     572.7342- 4329.374i    573.  -4329.   4367. -1.44  #> 10 0.0340    7811.7219- 3510.364i   7812.  -3510.   8564. -0.422 #> # ℹ 3,167 more rows library(ggfortify) library(patchwork)  ggplot(fortify(sunspot.month)) +    aes(x = Index, y = Data) +    geom_line() +   xlab(\"Year\") +   ylab(\"Sunspot count\") +   theme_bw() -> p1  xlocs <- c(1, 0.1, 0.01) xlabs <- c(\"1\", \"10\", \"100\")  sunspot.month.fft |>   dplyr::filter(dim_1 > 0) |>   ggplot() +     aes(x = dim_1, y = mod) +     geom_point() +     scale_y_continuous(trans = \"log\", labels = function(y) round(y)) +     scale_x_continuous(trans = \"log\", breaks = xlocs, labels = xlabs) +     xlab(\"Cycle duration (years)\") +     ylab(\"Cycle amplitude\") +     geom_smooth() +     theme_bw() -> p2  print(p1 / p2)"},{"path":"https://thk686.github.io/tidyfft/reference/can_repr.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and Retrieve Representations of a tidy_fft Object — can_repr","title":"Check and Retrieve Representations of a tidy_fft Object — can_repr","text":"functions check retrieve specific representations tidy_fft object. Supported representations include: Complex (\"cplx\"): Contains column fx complex Fourier coefficients. Rectangular (\"rect\"): Contains columns re (real) im (imaginary) components. Polar (\"polr\"): Contains columns mod (modulus) arg (argument).","code":""},{"path":"https://thk686.github.io/tidyfft/reference/can_repr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and Retrieve Representations of a tidy_fft Object — can_repr","text":"","code":"can_repr(x, repr)  get_repr(x)  has_cplx(x)  has_rect(x)  has_polr(x)"},{"path":"https://thk686.github.io/tidyfft/reference/can_repr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and Retrieve Representations of a tidy_fft Object — can_repr","text":"x tidy_fft object. repr can_repr(), target representation check. character string (\"polr\", \"rect\", \"cplx\").","code":""},{"path":"https://thk686.github.io/tidyfft/reference/can_repr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and Retrieve Representations of a tidy_fft Object — can_repr","text":"can_repr(): logical value (TRUE FALSE) indicating object specified representation. get_repr(): character vector representations present object. has_cplx(), has_rect(), has_polr(): Logical values (TRUE FALSE) indicating presence specific representations.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/can_repr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and Retrieve Representations of a tidy_fft Object — can_repr","text":"","code":"tft <- tidy_fft(c(1, 0, -1, 0))  # Check specific representations can_repr(tft, \"cplx\") # TRUE #> [1] TRUE can_repr(tft, \"rect\") # FALSE #> [1] FALSE  # Retrieve current representations get_repr(tft) # \"cplx\" #> [1] \"cplx\"  # Check individual representations has_cplx(tft) # TRUE #> [1] TRUE has_rect(tft) # FALSE #> [1] FALSE has_polr(tft) # FALSE #> [1] FALSE"},{"path":"https://thk686.github.io/tidyfft/reference/dot-as_tidy_fft_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an Object to a Tidy FFT Object — .as_tidy_fft_obj","title":"Convert an Object to a Tidy FFT Object — .as_tidy_fft_obj","text":"internal helper function applies necessary structure class attributes convert given object tidy_fft object.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/dot-as_tidy_fft_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an Object to a Tidy FFT Object — .as_tidy_fft_obj","text":"","code":".as_tidy_fft_obj(x, ...)"},{"path":"https://thk686.github.io/tidyfft/reference/dot-as_tidy_fft_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an Object to a Tidy FFT Object — .as_tidy_fft_obj","text":"x input object convert, typically tibble data frame. ... Additional attributes include structured object, metadata specific attributes required Fourier Transform analysis.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/dot-as_tidy_fft_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an Object to a Tidy FFT Object — .as_tidy_fft_obj","text":"input object x, tidy_fft class additional attributes provided ....","code":""},{"path":"https://thk686.github.io/tidyfft/reference/dot-as_tidy_fft_obj.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert an Object to a Tidy FFT Object — .as_tidy_fft_obj","text":"tidy_fft object tibble-like structure additional class attributes used represent Fourier Transform results tidy format.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/dot-fourier_frequencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Fourier frequencies for default inputs — .fourier_frequencies","title":"Compute Fourier frequencies for default inputs — .fourier_frequencies","text":"Computes normalized Fourier frequencies scalar vector inputs, evenly spaced -0.5 0.5.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/dot-fourier_frequencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Fourier frequencies for default inputs — .fourier_frequencies","text":"","code":".fourier_frequencies(x)"},{"path":"https://thk686.github.io/tidyfft/reference/dot-fourier_frequencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Fourier frequencies for default inputs — .fourier_frequencies","text":"x scalar vector representing length sequence.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/dot-fourier_frequencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Fourier frequencies for default inputs — .fourier_frequencies","text":"numeric vector containing normalized Fourier frequencies.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/dot-num_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the number of samples in an input — .num_samples","title":"Compute the number of samples in an input — .num_samples","text":"helper function determines number samples input object. vector, returns length. matrix data frame, returns number rows.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/dot-num_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the number of samples in an input — .num_samples","text":"","code":".num_samples(x)"},{"path":"https://thk686.github.io/tidyfft/reference/dot-num_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the number of samples in an input — .num_samples","text":"x input object (scalar, vector, matrix, data frame).","code":""},{"path":"https://thk686.github.io/tidyfft/reference/dot-num_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the number of samples in an input — .num_samples","text":"integer representing number samples (rows) input object.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/fourier_frequencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Fourier Frequencies — fourier_frequencies","title":"Compute Fourier Frequencies — fourier_frequencies","text":"Computes Fourier frequencies various types inputs, scalars, vectors, matrices, time series, arrays. generic function dispatches appropriate methods based input type.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/fourier_frequencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Fourier Frequencies — fourier_frequencies","text":"","code":"fourier_frequencies(x)  # Default S3 method fourier_frequencies(x)  # S3 method for class 'ts' fourier_frequencies(x)  # S3 method for class 'array' fourier_frequencies(x)"},{"path":"https://thk686.github.io/tidyfft/reference/fourier_frequencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Fourier Frequencies — fourier_frequencies","text":"x input object. Supported input types: Scalar vector: length sequence. Time series (ts): Frequencies scaled based sampling rate. Multidimensional array matrix: Frequencies computed dimension.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/fourier_frequencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Fourier Frequencies — fourier_frequencies","text":"numeric vector 1D inputs tibble multidimensional inputs, : dim_1, dim_2, ..., represent Fourier frequencies dimension.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/fourier_frequencies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Fourier Frequencies — fourier_frequencies","text":"function following methods: Default Input (fourier_frequencies.default): Computes normalized Fourier frequencies scalar vector inputs. Time Series Input (fourier_frequencies.ts): Computes frequencies scaled frequency attribute ts object. Multidimensional Arrays (fourier_frequencies.array): Computes frequencies dimension matrix array. See examples details case.","code":""},{"path":[]},{"path":"https://thk686.github.io/tidyfft/reference/fourier_frequencies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Fourier Frequencies — fourier_frequencies","text":"","code":"# Default input (vector) fourier_frequencies(8) #> # A tibble: 8 × 1 #>    dim_1 #>    <dbl> #> 1  0     #> 2  0.125 #> 3  0.25  #> 4  0.375 #> 5  0.5   #> 6 -0.375 #> 7 -0.25  #> 8 -0.125  # Time series input ts_obj <- ts(rnorm(36), frequency = 12) fourier_frequencies(ts_obj) #> # A tibble: 36 × 1 #>    dim_1 #>    <dbl> #>  1 0     #>  2 0.333 #>  3 0.667 #>  4 1     #>  5 1.33  #>  6 1.67  #>  7 2     #>  8 2.33  #>  9 2.67  #> 10 3     #> # ℹ 26 more rows  # Multidimensional array input array_input <- array(1:27, dim = c(3, 3, 3)) fourier_frequencies(array_input) #> # A tibble: 27 × 3 #>    dim_3  dim_2  dim_1 #>    <dbl>  <dbl>  <dbl> #>  1 0      0      0     #>  2 0      0      0.333 #>  3 0      0     -0.333 #>  4 0      0.333  0     #>  5 0      0.333  0.333 #>  6 0      0.333 -0.333 #>  7 0     -0.333  0     #>  8 0     -0.333  0.333 #>  9 0     -0.333 -0.333 #> 10 0.333  0      0     #> # ℹ 17 more rows  # Matrix input matrix_input <- matrix(1:9, nrow = 3, ncol = 3) fourier_frequencies(matrix_input) #> # A tibble: 9 × 2 #>    dim_2  dim_1 #>    <dbl>  <dbl> #> 1  0      0     #> 2  0      0.333 #> 3  0     -0.333 #> 4  0.333  0     #> 5  0.333  0.333 #> 6  0.333 -0.333 #> 7 -0.333  0     #> 8 -0.333  0.333 #> 9 -0.333 -0.333"},{"path":"https://thk686.github.io/tidyfft/reference/get_fx.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Fourier Coefficients and Derived Components — get_fx","title":"Extract Fourier Coefficients and Derived Components — get_fx","text":"utility functions extract convert tidy_fft object desired representation ('cplx', 'rect', 'polr') extract specific components.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/get_fx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Fourier Coefficients and Derived Components — get_fx","text":"","code":"get_fx(x)  get_rect(x)  get_re(x)  get_im(x)  get_polr(x)  get_mod(x)  get_arg(x)"},{"path":"https://thk686.github.io/tidyfft/reference/get_fx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Fourier Coefficients and Derived Components — get_fx","text":"x tidy_fft object containing FFT results representation.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/get_fx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Fourier Coefficients and Derived Components — get_fx","text":"requested components converted representations: get_fx(): complex vector Fourier coefficients (fx). get_rect(): tibble containing rectangular representation (re, im). get_re(): numeric vector real parts (re). get_im(): numeric vector imaginary parts (im). get_polr(): tibble containing polar representation (mod, arg). get_mod(): numeric vector magnitudes (mod). get_arg(): numeric vector phase angles (arg), radians.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/get_fx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Fourier Coefficients and Derived Components — get_fx","text":"get_fx(): Extracts complex Fourier coefficients 'cplx' representation. get_rect(): Converts rectangular form returns tibble re (real) im (imaginary) components. get_re(): Extracts real part rectangular representation. get_im(): Extracts imaginary part rectangular representation. get_polr(): Converts polar form returns tibble mod (magnitude) arg (phase angle). get_mod(): Extracts magnitude polar representation. get_arg(): Extracts phase angle (radians) polar representation.","code":""},{"path":[]},{"path":"https://thk686.github.io/tidyfft/reference/get_fx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Fourier Coefficients and Derived Components — get_fx","text":"","code":"# Example usage fft_result <- tidy_fft(c(1, 0, -1, 0))  # Extract components fx_values <- get_fx(fft_result) re_values <- get_re(fft_result) im_values <- get_im(fft_result) mod_values <- get_mod(fft_result) arg_values <- get_arg(fft_result) rect_values <- get_rect(fft_result) polr_values <- get_polr(fft_result)  print(fx_values) #> [1] 0.0+0i 0.5+0i 0.0+0i 0.5+0i print(re_values) #> [1] 0.0 0.5 0.0 0.5 print(im_values) #> [1] 0 0 0 0 print(mod_values) #> [1] 0.0 0.5 0.0 0.5 print(arg_values) #> [1] 0 0 0 0 print(rect_values) #> # A tibble: 4 × 2 #>      re    im #>   <dbl> <dbl> #> 1   0       0 #> 2   0.5     0 #> 3   0       0 #> 4   0.5     0 print(polr_values) #> # A tibble: 4 × 2 #>     mod   arg #>   <dbl> <dbl> #> 1   0       0 #> 2   0.5     0 #> 3   0       0 #> 4   0.5     0"},{"path":"https://thk686.github.io/tidyfft/reference/plot.tidy_fft.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the modulus of FFT results — plot.tidy_fft","title":"Plot the modulus of FFT results — plot.tidy_fft","text":"Plots modulus FFT results frequencies.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/plot.tidy_fft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the modulus of FFT results — plot.tidy_fft","text":"","code":"# S3 method for class 'tidy_fft' plot(x, ...)"},{"path":"https://thk686.github.io/tidyfft/reference/plot.tidy_fft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the modulus of FFT results — plot.tidy_fft","text":"x tidy_fft object. ... passed ggplot.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/tidy_fft.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute FFT and Return a Tidy Result with Normalized Coefficients — tidy_fft","title":"Compute FFT and Return a Tidy Result with Normalized Coefficients — tidy_fft","text":"Computes Fast Fourier Transform (FFT) various input types, including vectors, time series (ts), arrays. FFT values normalized length input (product dimensions arrays). result returned tidy tibble containing Fourier frequencies normalized FFT values.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/tidy_fft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute FFT and Return a Tidy Result with Normalized Coefficients — tidy_fft","text":"","code":"tidy_fft(x)  # Default S3 method tidy_fft(x)  # S3 method for class 'ts' tidy_fft(x)  # S3 method for class 'array' tidy_fft(x)"},{"path":"https://thk686.github.io/tidyfft/reference/tidy_fft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute FFT and Return a Tidy Result with Normalized Coefficients — tidy_fft","text":"x Input object compute FFT. can : numeric vector (default method). time series object (ts). multidimensional numeric array.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/tidy_fft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute FFT and Return a Tidy Result with Normalized Coefficients — tidy_fft","text":"tibble containing: Fourier frequencies: Represented columns dim_1, dim_2, ..., depending input dimensions. Normalized FFT values: Stored fx column complex values, normalized input size.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/tidy_fft.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute FFT and Return a Tidy Result with Normalized Coefficients — tidy_fft","text":"generic function methods specific input types: Default Input (tidy_fft.default): Computes FFT numeric vector normalizes result vector length. Time Series Input (tidy_fft.ts): Computes FFT ts object, scaling frequencies time series frequency attribute normalizing FFT values. Array Input (tidy_fft.array): Computes FFT multidimensional array normalizes FFT values product array dimensions. method returns tidy tibble Fourier frequencies (dim_1, dim_2, etc.) paired corresponding normalized FFT values.","code":""},{"path":[]},{"path":"https://thk686.github.io/tidyfft/reference/tidy_fft.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute FFT and Return a Tidy Result with Normalized Coefficients — tidy_fft","text":"","code":"# FFT for a numeric vector tidy_fft(c(1, 0, -1, 0)) #> # A tibble: 4 × 2 #>   dim_1 fx     #> * <dbl> <cpl>  #> 1  0    0.0+0i #> 2  0.25 0.5+0i #> 3  0.5  0.0+0i #> 4 -0.25 0.5+0i  # FFT for a time series ts_obj <- ts(sin(1:10), frequency = 12) tidy_fft(ts_obj) #> # A tibble: 10 × 2 #>    dim_1 fx                      #>  * <dbl> <cpl>                   #>  1   0    0.14111884+0.00000000i #>  2   1.2  0.17597704+0.20140018i #>  3   2.4 -0.00540927-0.37860893i #>  4   3.6  0.06552682-0.10310219i #>  5   4.8  0.07536372-0.04010851i #>  6   6    0.07743552+0.00000000i #>  7  -4.8  0.07536372+0.04010851i #>  8  -3.6  0.06552682+0.10310219i #>  9  -2.4 -0.00540927+0.37860893i #> 10  -1.2  0.17597704-0.20140018i  # FFT for a multidimensional array arr <- array(1:8, dim = c(2, 2, 2)) tidy_fft(arr) #> # A tibble: 8 × 4 #>   dim_3 dim_2 dim_1 fx      #> * <dbl> <dbl> <dbl> <cpl>   #> 1   0     0     0    4.5+0i #> 2   0     0     0.5 -0.5+0i #> 3   0     0.5   0   -1.0+0i #> 4   0     0.5   0.5  0.0+0i #> 5   0.5   0     0   -2.0+0i #> 6   0.5   0     0.5  0.0+0i #> 7   0.5   0.5   0    0.0+0i #> 8   0.5   0.5   0.5  0.0+0i"},{"path":"https://thk686.github.io/tidyfft/reference/tidy_ifft.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Inverse FFT on a Tidy Result — tidy_ifft","title":"Perform Inverse FFT on a Tidy Result — tidy_ifft","text":"Computes inverse Fast Fourier Transform (IFFT) reconstruct original signal tidy_fft object FFT results. generic function methods default inputs tidy_fft objects.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/tidy_ifft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Inverse FFT on a Tidy Result — tidy_ifft","text":"","code":"tidy_ifft(x)  # Default S3 method tidy_ifft(x)  # S3 method for class 'tidy_fft' tidy_ifft(x)"},{"path":"https://thk686.github.io/tidyfft/reference/tidy_ifft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Inverse FFT on a Tidy Result — tidy_ifft","text":"x Input object containing FFT results. can : numeric vector FFT coefficients. tidy_fft object stored FFT results.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/tidy_ifft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Inverse FFT on a Tidy Result — tidy_ifft","text":"vector time series object representing reconstructed signal FFT results. original signal real-valued, IFFT returns real part reconstruction.","code":""},{"path":[]},{"path":"https://thk686.github.io/tidyfft/reference/tidy_ifft.html","id":"methods-","dir":"Reference","previous_headings":"","what":"Methods:","title":"Perform Inverse FFT on a Tidy Result — tidy_ifft","text":"Default Input (tidy_ifft.default): Performs inverse FFT numeric vector FFT coefficients. Tidy FFT Input (tidy_ifft.tidy_fft): Reconstructs original signal tidy_fft object, restoring attributes dimensions (.dim) time series properties (.tsp), present.","code":""},{"path":[]},{"path":"https://thk686.github.io/tidyfft/reference/tidy_ifft.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Inverse FFT on a Tidy Result — tidy_ifft","text":"","code":"# Example with FFT and inverse FFT fft_result <- tidy_fft(c(1, 0, -1, 0)) original_signal <- tidy_ifft(fft_result) print(original_signal) #> [1]  1  0 -1  0"},{"path":"https://thk686.github.io/tidyfft/reference/tidyfft-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tidyfft: Tidy manipulation of fourier transformed data — tidyfft-package","title":"tidyfft: Tidy manipulation of fourier transformed data — tidyfft-package","text":"Provides functions storing fourier coefficients tibble manipulating various ways. main different tidy_fft base R tidy_fft computes normalized fourier frequencies cycles per stride, .e., cycles per interval samples, often point confusion new users convenient plotting, etc. frequencies coefficients stored tibble (data.frame), easy processing , e.g., dplyr facilitated.","code":""},{"path":[]},{"path":"https://thk686.github.io/tidyfft/reference/tidyfft-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tidyfft: Tidy manipulation of fourier transformed data — tidyfft-package","text":"Maintainer: Timothy Keitt tkeitt@gmail.com","code":""},{"path":"https://thk686.github.io/tidyfft/reference/to_cplx.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a tidy_fft Object Between Representations — to_cplx","title":"Convert a tidy_fft Object Between Representations — to_cplx","text":"functions convert tidy_fft object specified representation: to_cplx(): Converts complex representation (fx). to_rect(): Converts rectangular representation (re, im). to_polr(): Converts polar representation (mod, arg).","code":""},{"path":"https://thk686.github.io/tidyfft/reference/to_cplx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a tidy_fft Object Between Representations — to_cplx","text":"","code":"to_cplx(x, .keep = \"unused\")  to_rect(x, .keep = \"unused\")  to_polr(x, .keep = \"unused\")"},{"path":"https://thk686.github.io/tidyfft/reference/to_cplx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a tidy_fft Object Between Representations — to_cplx","text":"x tidy_fft object. .keep Specifies columns retain. Defaults \"unused\".","code":""},{"path":"https://thk686.github.io/tidyfft/reference/to_cplx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a tidy_fft Object Between Representations — to_cplx","text":"modified tidy_fft object containing specified representation: to_cplx(): Adds fx column complex values. to_rect(): Adds re im columns rectangular components. to_polr(): Adds mod arg columns polar components.","code":""},{"path":"https://thk686.github.io/tidyfft/reference/to_cplx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a tidy_fft Object Between Representations — to_cplx","text":"to_cplx(): Converts rectangular (re, im) polar (mod, arg) components complex form. to_rect(): Converts complex (fx) polar components rectangular form. to_polr(): Converts complex (fx) rectangular components polar form.","code":""},{"path":[]},{"path":"https://thk686.github.io/tidyfft/reference/to_cplx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a tidy_fft Object Between Representations — to_cplx","text":"","code":"tft <- tidy_fft(c(1, 0, -1, 0))  # Convert to different representations tft_cplx <- to_cplx(tft) # Complex representation tft_rect <- to_rect(tft_cplx) # Rectangular representation tft_polr <- to_polr(tft_cplx) # Polar representation  # Print results print(tft_cplx) #> # A tibble: 4 × 2 #>   dim_1 fx     #> * <dbl> <cpl>  #> 1  0    0.0+0i #> 2  0.25 0.5+0i #> 3  0.5  0.0+0i #> 4 -0.25 0.5+0i print(tft_rect) #> # A tibble: 4 × 3 #>   dim_1    re    im #>   <dbl> <dbl> <dbl> #> 1  0      0       0 #> 2  0.25   0.5     0 #> 3  0.5    0       0 #> 4 -0.25   0.5     0 print(tft_polr) #> # A tibble: 4 × 3 #>   dim_1   mod   arg #>   <dbl> <dbl> <dbl> #> 1  0      0       0 #> 2  0.25   0.5     0 #> 3  0.5    0       0 #> 4 -0.25   0.5     0"}]
